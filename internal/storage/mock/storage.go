// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	types "github.com/Decentr-net/decentr/x/community/types"
	entities "github.com/Decentr-net/theseus/internal/entities"
	storage "github.com/Decentr-net/theseus/internal/storage"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// WithLockedHeight mocks base method
func (m *MockStorage) WithLockedHeight(ctx context.Context, height uint64, f func(storage.Storage) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLockedHeight", ctx, height, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithLockedHeight indicates an expected call of WithLockedHeight
func (mr *MockStorageMockRecorder) WithLockedHeight(ctx, height, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLockedHeight", reflect.TypeOf((*MockStorage)(nil).WithLockedHeight), ctx, height, f)
}

// GetHeight mocks base method
func (m *MockStorage) GetHeight(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeight", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeight indicates an expected call of GetHeight
func (mr *MockStorageMockRecorder) GetHeight(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeight", reflect.TypeOf((*MockStorage)(nil).GetHeight), ctx)
}

// GetProfiles mocks base method
func (m *MockStorage) GetProfiles(ctx context.Context, addr []string) ([]*entities.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfiles", ctx, addr)
	ret0, _ := ret[0].([]*entities.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfiles indicates an expected call of GetProfiles
func (mr *MockStorageMockRecorder) GetProfiles(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfiles", reflect.TypeOf((*MockStorage)(nil).GetProfiles), ctx, addr)
}

// SetProfile mocks base method
func (m *MockStorage) SetProfile(ctx context.Context, p *entities.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProfile", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProfile indicates an expected call of SetProfile
func (mr *MockStorageMockRecorder) SetProfile(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProfile", reflect.TypeOf((*MockStorage)(nil).SetProfile), ctx, p)
}

// Follow mocks base method
func (m *MockStorage) Follow(ctx context.Context, follower, followee string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Follow", ctx, follower, followee)
	ret0, _ := ret[0].(error)
	return ret0
}

// Follow indicates an expected call of Follow
func (mr *MockStorageMockRecorder) Follow(ctx, follower, followee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockStorage)(nil).Follow), ctx, follower, followee)
}

// Unfollow mocks base method
func (m *MockStorage) Unfollow(ctx context.Context, follower, followee string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unfollow", ctx, follower, followee)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unfollow indicates an expected call of Unfollow
func (mr *MockStorageMockRecorder) Unfollow(ctx, follower, followee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unfollow", reflect.TypeOf((*MockStorage)(nil).Unfollow), ctx, follower, followee)
}

// CreatePost mocks base method
func (m *MockStorage) CreatePost(ctx context.Context, p *entities.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePost indicates an expected call of CreatePost
func (mr *MockStorageMockRecorder) CreatePost(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockStorage)(nil).CreatePost), ctx, p)
}

// GetPost mocks base method
func (m *MockStorage) GetPost(ctx context.Context, owner, uuid string) (*entities.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, owner, uuid)
	ret0, _ := ret[0].(*entities.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost
func (mr *MockStorageMockRecorder) GetPost(ctx, owner, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockStorage)(nil).GetPost), ctx, owner, uuid)
}

// DeletePost mocks base method
func (m *MockStorage) DeletePost(ctx context.Context, postOwner, postUUID string, timestamp time.Time, deletedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, postOwner, postUUID, timestamp, deletedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost
func (mr *MockStorageMockRecorder) DeletePost(ctx, postOwner, postUUID, timestamp, deletedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockStorage)(nil).DeletePost), ctx, postOwner, postUUID, timestamp, deletedBy)
}

// SetLike mocks base method
func (m *MockStorage) SetLike(ctx context.Context, postOwner, postUUID string, weight types.LikeWeight, timestamp time.Time, likeOwner string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLike", ctx, postOwner, postUUID, weight, timestamp, likeOwner)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLike indicates an expected call of SetLike
func (mr *MockStorageMockRecorder) SetLike(ctx, postOwner, postUUID, weight, timestamp, likeOwner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLike", reflect.TypeOf((*MockStorage)(nil).SetLike), ctx, postOwner, postUUID, weight, timestamp, likeOwner)
}
